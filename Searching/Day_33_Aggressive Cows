class Solution {
    public static int aggressiveCows(int[] stalls, int k) {
        // Sort the stall positions
        Arrays.sort(stalls);
        
        int low = 1;  // Minimum possible distance
        int high = stalls[stalls.length - 1] - stalls[0];  // Maximum possible distance
        
        int result = 0;  // Variable to store the best minimum distance
        
        while (low <= high) {
            int mid = low + (high - low) / 2;
            
            // Check if we can place cows with at least `mid` distance apart
            if (canPlaceCows(stalls, k, mid)) {
                result = mid;  // We can place cows, try for a larger distance
                low = mid + 1;
            } else {
                high = mid - 1;  // We cannot place cows, try for a smaller distance
            }
        }
        
        return result;
    }
    
    // Helper function to check if we can place cows with at least `minDist` distance apart
    private static boolean canPlaceCows(int[] stalls, int k, int minDist) {
        int count = 1;  // Place the first cow in the first stall
        int lastPosition = stalls[0];
        
        for (int i = 1; i < stalls.length; i++) {
            // If the current stall is at least `minDist` away from the last placed cow
            if (stalls[i] - lastPosition >= minDist) {
                count++;  // Place the cow here
                lastPosition = stalls[i];  // Update the position of the last placed cow
            }
            if (count == k) {
                return true;  // We have successfully placed all cows
            }
        }
        
        return false;  // Could not place all cows
    }
}
